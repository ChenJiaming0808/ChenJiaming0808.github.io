<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[maven-archetype-webapp项目搭建]]></title>
    <url>%2Fpost%2F5428d898.html</url>
    <content type="text"><![CDATA[目录结构 pom.xml配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;cn.vivfeng&lt;/groupId&gt; &lt;artifactId&gt;JavaWebActual&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;war&lt;/packaging&gt; &lt;name&gt;JavaWebActual Maven Webapp&lt;/name&gt; &lt;!-- FIXME change it to the project's website --&gt; &lt;url&gt;http://www.example.com&lt;/url&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;maven.compiler.source&gt;10&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;10&lt;/maven.compiler.target&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.11&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.11&lt;/version&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-dbcp2 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-dbcp2&lt;/artifactId&gt; &lt;version&gt;2.5.0&lt;/version&gt; &lt;/dependency&gt; &lt;!--使用jstl--&gt; &lt;dependency&gt; &lt;groupId&gt;jstl&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;taglibs&lt;/groupId&gt; &lt;artifactId&gt;standard&lt;/artifactId&gt; &lt;version&gt;1.1.2&lt;/version&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;4.0.1&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;finalName&gt;JavaWebActual&lt;/finalName&gt; &lt;pluginManagement&gt;&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.0&lt;/version&gt; &lt;/plugin&gt; &lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.7.0&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.20.1&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt; &lt;version&gt;3.2.0&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-install-plugin&lt;/artifactId&gt; &lt;version&gt;2.5.2&lt;/version&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-deploy-plugin&lt;/artifactId&gt; &lt;version&gt;2.8.2&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt; &lt;/build&gt;&lt;/project&gt;]]></content>
      <tags>
        <tag>JavaWeb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用的库]]></title>
    <url>%2Fpost%2F789a8edc.html</url>
    <content type="text"><![CDATA[数据库 MySQL Connector/J Apache Commons DbUtils C3P0 Apache Commons DBCP 日志 Apache Commons Logging Apache Log4j 其它 Java Servlet API Java(TM) EE 8 Specification APIs JSoup Java HTML Parser 用于处理和解析HTML Google Guava XStream 用于将对象序列化到 XML 中 iText 用于操作PDF Apache PDF box 用于操作PDF Gson 用于处理JSON Joda Time 替代Java中日期和时间类 算法 Algs4 测试框架 JUnit]]></content>
      <tags>
        <tag>Library</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MyBatis]]></title>
    <url>%2Fpost%2F1bff3c65.html</url>
    <content type="text"></content>
      <tags>
        <tag>Framework</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用预编译STATEMENT]]></title>
    <url>%2Fpost%2Fe14f58a.html</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829import cn.vifeng.util.DBUtil;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.SQLException;public class Main &#123; public static void main(String[] args) throws SQLException &#123; //获得数据库连接 Connection conn = DBUtil.getConnection(); //设置自动提交 conn.setAutoCommit(true); //根据sql语句创建PreparedStatement String sql = "insert into student values (?,?,?,?,?)"; PreparedStatement ps = conn.prepareStatement(sql); //设置参数 ps.setInt(1, 1); ps.setString(2, "测试名字"); ps.setInt(3, 60); ps.setInt(4, 60); ps.setInt(5, 60); //执行 ps.executeUpdate(); &#125;&#125;]]></content>
      <tags>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用事务]]></title>
    <url>%2Fpost%2F78135f07.html</url>
    <content type="text"><![CDATA[事务要求MYSQL表的类型必须是INNODB才支持事务。 目的在事务中的多个操作，要么都成功，要么都失败。 实现方式通过 conn.setAutoCommit(false);关闭自动提交执行execute()或executeUpdate()后，使用 conn.commit();进行手动提交。]]></content>
      <tags>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JDBC踩坑记录]]></title>
    <url>%2Fpost%2Ff3335794.html</url>
    <content type="text"><![CDATA[数据库连接未释放导致数据库连接池占满123456//解决方法try (Connection conn = DBUtil.getConnection();) &#123; //代码&#125; catch (SQLException e) &#123; e.printStackTrace();&#125;]]></content>
      <tags>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[execute()与executeUpdate()的区别]]></title>
    <url>%2Fpost%2Fa7c446f7.html</url>
    <content type="text"><![CDATA[相同点都可以执行 增加，删除，修改 语句 不同点 execute可以执行查询语句，然后通过getResultSet，把结果集取出来；executeUpdate不能执行查询语句。 execute返回boolean类型，true表示执行的是查询语句，false表示执行的是insert,delete,update等等；executeUpdate返回的是int，表示有多少条数据受到了影响。]]></content>
      <tags>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[特殊操作]]></title>
    <url>%2Fpost%2Facab83dd.html</url>
    <content type="text"><![CDATA[获取表的元数据元数据概念：和数据库服务器相关的数据，比如数据库版本，有哪些表，表有哪些字段，字段类型是什么等等。1234567891011121314151617181920212223242526272829303132333435import cn.vifeng.util.DBUtil;import java.sql.Connection;import java.sql.DatabaseMetaData;import java.sql.ResultSet;import java.sql.SQLException;public class Main &#123; public static void main(String[] args) throws SQLException &#123; //获得数据库连接 Connection conn = DBUtil.getConnection(); // 查看数据库层面的元数据，即数据库服务器版本，驱动版本，都有哪些数据库等等 DatabaseMetaData dmd = conn.getMetaData(); // 获取数据库服务器产品名称 System.out.println("数据库产品名称:\t" + dmd.getDatabaseProductName()); // 获取数据库服务器产品版本号 System.out.println("数据库产品版本:\t" + dmd.getDatabaseProductVersion()); // 获取数据库服务器用作类别和表名之间的分隔符 如test.user System.out.println("数据库和表分隔符:\t" + dmd.getCatalogSeparator()); // 获取驱动版本 System.out.println("驱动版本:\t" + dmd.getDriverVersion()); System.out.println("可用的数据库列表："); // 获取所有数据库名称 ResultSet rs = dmd.getCatalogs(); while (rs.next()) &#123; System.out.println("数据库名称:\t" + rs.getString(1)); &#125; &#125;&#125;]]></content>
      <tags>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java关键字]]></title>
    <url>%2Fpost%2Fb960f15.html</url>
    <content type="text"><![CDATA[Java大法好&nbsp;&nbsp;&nbsp;&nbsp;[]~(￣▽￣)~* 关键字 含义 abstract 抽象类或方法 assert 用来查找内部程序错误 boolean 布尔类型 break 跳出一个switch或循环 byte 8位整数类型 case switch的一个分支 catch 捕获异常的try块子句 char Unicode字符类型 class 定义一个类类型 const 未使用 continue 在循环末尾继续 default switch的缺省子句 do do/while循环最前面的语句 double 双精度浮点数类型 else if语句的else子句 enum 枚举类型 extends 定义一个类的父类 final 一个常量，或不能覆盖的一个类或方法 finally try块中总会执行的部分 float 单精度浮点数类型 for 一种循环类型 goto 未使用 if 一个条件语句 implements 定义一个类实现的接口 import 导入一个包 instanceof 测试一个对象是否为一个类的实例 int 32位整数类型 interface 一种抽象类型，其中包含可以由类实现的方法 long 64位长整数类型 native 由宿主系统实现的一个方法 new 分配一个新对象或数组 null 一个空引用（需要说明，null从技术上讲是一个直接量，而不是关键字） package 包含类的一个包 private 这个特性只能由该类的方法访问 protected 这个特性只能由该类、其子类以及同一个包中的其他类的方法访问 public 这个特性可以由所有类的方法访问 return 从一个方法返回 short 16位整数类型 static 这个特性是这个类特有的，而不属于这个类的对象 strictfp 对浮点数计算使用严格的规则 super 超类对象或构造函数 switch 一个选择语句 synchronized 对线程而言是原子的方法或代码块 this 当前类的一个方法或构造函数的隐含参数 throw 抛出一个异常 throws 一个方法可能拋出的异常 transient 标志非永久的数据 try 捕获异常的代码块 void 指示一个方法不返回任何值 volatile 确保一个字段可以由多个线程访问 while 一种循环类型]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IntelliJ IDEA 常用快捷键参照表]]></title>
    <url>%2Fpost%2Ff72cdd31.html</url>
    <content type="text"><![CDATA[我整理了一张快捷键参照表方便大家使用IntelliJ IDEA 快捷键 英文说明 中文说明 Ctrl + Space Basic code completion (the name of any class, method or variable) 补全代码 Ctrl + Shift + Space Smart code completion (filters the list of methods and variables by expected type 在列出的可选项中只显示出你所输入的关键字最相关的信息 Ctrl + Shift + Enter Complete statement 代码补全后，自动在代码末尾添加分号结束符。 Ctrl + P Parameter info (within method call arguments) 在某个方法中，调用该按键后，会展示出这个方法的调用参数列表信息。 Ctrl + Q Quick documentation lookup 展示某个类或者方法的 API 说明文档 Ctrl + mouse over code Brief Info 跳进到某个类或者方法源代码中进行查看 Alt + Insert Generate code… (Getters, Setters, Constructors, hashCode/equals, toString) 自动生成某个类的 Getters, Setters, Constructors, hashCode/equals, toString 等代码 Ctrl + o Override methods 展示该类中所有覆盖或者实现的方法列表，注意这里是字母o是小写！ Ctrl + Alt + T Surround with… (if..else,try..catch, for, synchronized, etc.) 自动生成具有环绕性质的代码，比如：if..else,try..catch, for, synchronized 等等，使用前要先选择好需要环绕的代码块。 Ctrl + / Comment/uncomment with line comment 对单行代码，添加或删除注释。分为两种情况：如果只是光标停留在某行，那么连续使用该快捷键，会不断注释掉下一行的代码；如果选定了某行代码（选定了某行代码一部分也算这种情况），那么连续使用该快捷键，会在添加或删除该行注释之间来回切换。 Ctrl + Shift + / Comment/uncomment with block comment 对代码块，添加或删除注释。它与 Ctrl + / 的区别是，它只会在代码块的开头与结尾添加注释符号！ Ctrl + W Select successively increasing code blocks 选中当前光标所在的代码块，多次触发，代码块会逐级变大。 Ctrl + Shift + W Decrease current selection to previous state 是 Ctrl + W 的反向操作，多次触发，代码块会逐级变小，最小变为光标。 Alt + Q Context info 展示包含当前光标所在代码的父节点信息，比如在 java 方法中调用，就会展示方法签名信息。 Alt + Enter Show intention actions and quick-fixes 展示当前当前光标所在代码，可以变化的扩展操作。 Ctrl + Alt + L Reformat code 格式化代码 Ctrl + Alt + O Optimize imports 去除没有实际用到的包 Ctrl + Alt + I Auto-indent line(s) 按照缩进的设定，自动缩进所选择的代码段。 Tab / Shift + Tab Indent/unindent selected lines 缩进或者不缩进一次所选择的代码段 Ctrl + X 或 Shift Delete Cut current line or selected block to clipboard 剪切当前代码 Ctrl + C 或 Ctrl + Insert Copy current line or selected block to clipboard 拷贝当前代码 Ctrl + V 或 Shift + Insert Paste from clipboard 粘贴之前剪切或拷贝的代码 Ctrl + Shift + V Paste from recent buffers… 从之前的剪切或拷贝的代码历史记录中，选择现在需要粘贴的内容。 Ctrl + D Duplicate current line or selected block 复制当前选中的代码 Ctrl + Y Delete line at caret 删除当前光标所在的代码行 Ctrl + Shift + J Smart line join 把下一行的代码接续到当前的代码行 Ctrl + Enter Smart line split 当前代码行与下一行代码之间插入一个空行，原来所在的光标不变。 Shift + Enter Start new line 当前代码行与下一行代码之间插入一个空行，原来光标现在处于新加的空行上。 Ctrl + Shift + U Toggle case for word at caret or selected block 对所选择的内容进行大小写转换 Ctrl + Shift + ]/[ Select till code block end/start 从当前光标所在位置开始，一直选择到当前光标所在代码段起始或者结束位置。 Ctrl + Delete Delete to word end 删除从当前光标所在位置开始，直到这个单词的结尾的内容。 Ctrl + NumPad(+/-) Expand/collapse code block 展开或收缩代码段 Ctrl + Shift + NumPad(+) Expand all 展开所有代码段 Ctrl + Shift + NumPad(-) Collapse all 收缩所有代码段 Ctrl + F4 Close active editor tab 关闭当前标签页 Shift + F6 Rename 修改名字]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018秋招后端开发]]></title>
    <url>%2Fpost%2Fd01d0d28.html</url>
    <content type="text"><![CDATA[转自：http://blog.csdn.net/acingdreamer/article/details/78479476 博主渣渣本科，挣扎到十一月秋招终于结束了。面过百度/腾讯/小米/网易/搜狗/知乎/京东/360/瓜子。期间总结了一些面试题目，现在放上来。由于是博主自己的面经记录，所以涵盖不全面的话诸位请谅解。 根据博主的面试经验来看，面试有一定的层次性，如bat级别公司每个点都会深入，而有些公司则只会问到表层，所以将每个领域都分为必须掌握和深入了解这两个部分。 一、计算机网络基础部分 TCP报头格式 UDP报头格式 TCP/UDP区别（不仅是宏观上的，最好能根据各自的机制讲解清楚） HTTP状态码（最好结合使用场景，比如在缓存命中时使用哪个） HTTP协议（一些报头字段的作用，如cace-control、keep-alive） OSI协议、TCP/IP协议以及每层对应的协议。 SESSION机制、cookie机制 TCP三次握手、四次挥手（这个问题真的要回答吐了，不过真的是面试官最喜欢问的，建议每天手撸一遍，而且不只是每次请求的过程，各种FIN_WAIT、TIME_WAIT状态也要掌握）。 打开网页到页面显示之间的过程（涵盖了各个方面，DNS解析过程，Nginx请求转发、连接建立和保持过程、浏览器内容渲染过程，考虑的越详细越好）。 http和https区别，https在请求时额外的过程，https是如何保证数据安全的 IP地址子网划分 POST和GET区别 DNS解析过程 深入部分 TCP如何保证数据的可靠传输的（这个问题可以引申出很多子问题，拥塞控制慢开始、拥塞避免、快重传、滑动窗口协议、停止等待协议、超时重传机制，最好都能掌握） 地址解析协议ARP 交换机和路由器的区别 二、数据库基础部分 事务四大特性（ACID） 数据库隔离级别，每个级别会引发什么问题，mysql默认是哪个级别 MYSQL的两种存储引擎区别（事务、锁级别等等），各自的适用场景 数据库的优化（从sql语句优化和索引两个部分回答） 索引有B+索引和hash索引，各自的区别 B+索引数据结构，和B树的区别 索引的分类（主键索引、唯一索引），最左前缀原则，哪些情况索引会失效 聚集索引和非聚集索引区别。 有哪些锁（乐观锁悲观锁），select时怎么加排它锁 关系型数据库和非关系型数据库区别 了解nosql 数据库三范式，根据某个场景设计数据表（可以通过手绘ER图） 数据库的主从复制 使用explain优化sql和索引 long_query怎么解决 内连接、外连接、交叉连接、笛卡儿积等 深入 MVCC机制 根据具体场景，说明版本控制机制 死锁怎么解决 varchar和char的使用场景。 mysql并发情况下怎么解决（通过事务、隔离级别、锁） Redis redis数据结构有哪些 redis队列应用场景 redis和Memcached（支持数据持久化） 分布式使用场景（储存session等） 发布/订阅使用场景 三、操作系统 内存的页面置换算法 进程调度算法 进程间通信方式 进程线程区别 进程之间的通信 父子进程、孤儿进程 fork进程时的操作，这个部分我回答的都不好，只能是死记硬背，建议基础好的同学多看看操作系统这部分，能大大加分。 四、算法基础 剑指OFFER的各个题目是最常见的，即使不是原题也是题目的变体，因为面试不像笔试，一般不会出特别困难的题目，所以剑指OFFER上小而精的题目就非常适合。建议手刷一遍。PHP的同学可以参考专栏剑指OFFER 二叉树相关（层次遍历、求深度、求两个节点距离、翻转二叉树、前中后序遍历） 链表相关（插入节点、链表逆置、使用链表进行大数字的加减，双向链表实现队列、寻找链表中的环） 堆（大量数据中寻找最大N个数字几乎每次都会问，还有堆在插入时进行的调整） 排序（八大排序，各自的时间复杂度、排序算法的稳定性。快排几乎每次都问） 二分查找（一般会深入，如寻找数组总和为K的两个数字） 两个栈实现队列。 图（深度广度优先遍历、单源最短路径、最小生成树） 动态规划问题。 深入 红黑树性质 分治法和动态规划的区别 计算时间复杂度 二叉树和哈希表查找的时间复杂度 具体题目记录 一个文本文件中每一行中有一个URL，最多一万行，统计每一个URL的次数，输出到另外一个文件中，每一行前面是URL，后面是个数。 单链表的逆序 一个函数实现给定字符串，去除前面和后面的空格，比如“ ab cd ”，最后得到的结果是”ab cd”，不能改变字符串的地址。 对比cookie和session,有一个值错误则不正确 查找10的阶乘后面有几个0 字符串匹配 字符串移位，给出字符串abc##dfg##gh，实现将所有#移至字符串串头。输出####abcdfggh（个人认为可以用后向移位，减少移位次数） 给出一颗二叉树，两个叶节点，找到这两个叶节点互连通的一条最短路径。 两个日期计算天数差 100个有序数组合并 矩阵的最大子矩阵和 给定一棵多叉树，每个节点有一个编号，现在要对节点排序，要求对于每个节点，它的父节点排在它后面,如果一棵树有N个节点，那么肯定有N-1条边。输入的数据形式为：Map.Entry LINUX 硬链接和软连接区别 kill用法，某个进程杀不掉的原因（进入内核态，忽略kill信号） linux用过的命令 系统管理命令（如查看内存使用、网络情况） 管道的使用 | grep的使用，一定要掌握，每次都会问在文件中查找 shell脚本 find命令 awk使用 语言部分（PHP） 数组操作函数 字符串操作函数（数组和字符串的函数是最常问的，非常多，一定不要记混了） 指针和引用区别 堆和栈的区别 == ===区别 PHP的垃圾回收机制 zval结构 防sql注入 跨域问题 长链接和长轮询 面向对象、设计模式 接口和抽象类区别 单继承 construct的调用顺序（子类父类之间） 设计模式（工厂模式、策略模式、单例模式、装饰模式比较常见） OOP特性，通过哪些机制实现的 重写和重载区别 静态类静态方法 根据某个需求设计一个类（主要考虑类之间的继承关系和属性的权限设置） 项目 项目中遇到的困难（提前想好，并且把实现或者优化方法说清楚） 系统的量级、pv、uv等 应对高并发的解决办法（分布式） 在项目中主要负责了哪些工作。 nginx的负载均衡 分布式缓存的一致性，服务器如何扩容（哈希环） 项目中用到了哪些技术 服务器性能如何测试 项目中印象深刻的东西 项目中遇到过哪些坑，怎么解决的 项目中为什么用redis以及怎么实现相关功能 用过的开源框架（路由问题），框架的原理 消息队列的应用场景（想一个） 有没有用到非关系型数据库 网站负载变大时怎么办 SOA? WebService? 《大型网站技术架构：核心原理与案例分析》 redis的消息队列 redis的数据类型 OAuth认证过程 单点登陆系统 分布式缓存的使用场景 一个Controller调用两个Service，这两Service又都分别调用两个Dao，问其中用到了几个数据库连接池的连接？ 图片是怎么存储的 分布式一致性协议、分布式锁（应用场景） 项目中的网络编程 划一下项目的架构 MVC的路由机制怎么实现的（路由很重要） 为什么要用hadoop 自己写的接口如何防止被别人恶意调用？印象笔记 如何实现数据容灾， 怎样实现负载均衡 如何解决单节点负载过 Redis和memcache区别 redis的持久化 总之要把写在简历上的项目部分熟悉一遍，技术栈、项目功能、难点都要考虑好。 总结 秋招真的是一场旷日持久的战争，祝各位都能拿到想要的OFFER。 PS:之前把一些难点找到答案做成了PDF，放在手机上每天看一点，效果不错。还有ANKI这个工具对于复习效果也很好。]]></content>
      <categories>
        <category>转发</category>
      </categories>
      <tags>
        <tag>后端开发</tag>
        <tag>招聘</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown测试]]></title>
    <url>%2Fpost%2F45babedb.html</url>
    <content type="text"><![CDATA[一级标题二级标题三级标题四级标题粗体斜体 ABCD EFGH IJKL a b c d e f g h i ABCD EFGH IGKL a b c d e f g h i]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
